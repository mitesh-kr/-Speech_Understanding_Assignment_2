# -*- coding: utf-8 -*-
"""visualize_MFCC_spectrograms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UdL4IgsPel6AApkoMZUi3QVWwZ5_2oTY
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import librosa.display

# Paths
MFCC_DIR = "/content/mfcc_feature"
SAVE_DIR = "/content/mfcc_analysis"
os.makedirs(SAVE_DIR, exist_ok=True)

# Selected languages for comparison
selected_languages = {
    "Urdu": "Urdu",
    "Punjabi": "Punjabi",
    "Bengali": "Bengali"
}

# Function to plot MFCC spectrogram
def plot_mfcc(mfcc, language, file_name):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(mfcc, x_axis="time", cmap="viridis")
    plt.colorbar(label="MFCC Coefficients")
    plt.title(f"MFCC Spectrogram ({language})")
    plt.xlabel("Time")
    plt.ylabel("MFCC Coefficients")
    # plt.show()
    plt.savefig(os.path.join(SAVE_DIR, f"{language}_{file_name}.png"), dpi=300)
    plt.close()  # Close to save memory

# Function to compute mean and variance of MFCCs
def compute_mfcc_stats(mfcc):
    return np.mean(mfcc, axis=1), np.var(mfcc, axis=1)

# Store statistics for comparison
mfcc_stats = {}

# Process each selected language
for language, lang_dir in selected_languages.items():
    language_path = os.path.join(MFCC_DIR, lang_dir)
    if os.path.isdir(language_path):
        print(f"Processing: {language}")

        # Get all available MFCC files
        mfcc_files = [f for f in os.listdir(language_path) if f.endswith(".npy")]

        # Select samples for visualization (5-10) and analysis (50+)
        vis_samples = mfcc_files[:10]  # First 10 for visualization
        stat_samples = mfcc_files[:50]  # First 50 for statistical analysis

        # Store MFCC features for statistical analysis
        mfcc_data = []

        # Process visualization samples
        for file in vis_samples:
            mfcc = np.load(os.path.join(language_path, file))
            plot_mfcc(mfcc, language, file)

        # Process statistical samples
        for file in stat_samples:
            mfcc = np.load(os.path.join(language_path, file))
            mfcc_data.append(mfcc)

        # Convert to numpy array and compute statistics
        mfcc_data = np.concatenate(mfcc_data, axis=1)  # Concatenate all samples along time axis
        mean_mfcc, var_mfcc = compute_mfcc_stats(mfcc_data)
        mfcc_stats[language] = {"mean": mean_mfcc, "variance": var_mfcc}
        mean_mfcc = np.mean(mfcc_data, axis=0)
        variance_mfcc = np.var(mfcc_data, axis=0)

        # Print the computed statistics
        print(f"\nStatistics for {language}:")
        print(f"Mean MFCC Coefficients:\n {mean_mfcc}")
        print(f"Variance of MFCC Coefficients:\n {var_mfcc}\n")